{"version":3,"sources":["components/AddPersonForm.js","components/Person.js","components/PersonsList.js","App.js","reportWebVitals.js","index.js"],"names":["AddPersonForm","props","useForm","register","handleSubmit","setFocus","reset","errors","formState","currentImage","useRef","useEffect","current","Fragment","className","onSubmit","new_person","Math","random","listArray","JSON","parse","localStorage","getItem","found","some","el","phone","push","setItem","stringify","name","last","toast","success","position","POSITION","TOP_CENTER","autoClose","notifyContactAdded","firstName","lastName","setNewContactAddedToggle","newContactAddedToggle","setShowForm","error","notifyContactExist","htmlFor","required","id","message","minLength","value","pattern","maxLength","type","onChange","e","reader","FileReader","onload","readyState","result","readAsDataURL","target","files","Person","src","image","alt","width","height","href","PersonsList","persons_list_element","length","map","person","console","log","configure","App","useState","showForm","toggleFormHandler","headerBtn","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbd3a930.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'; \r\nimport { useForm } from 'react-hook-form';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"./AddPersonForm.css\";\r\n\r\n\r\nfunction AddPersonForm(props) {\r\n    const { register, handleSubmit, setFocus, reset, formState: { errors }} = useForm();\r\n    const currentImage = useRef(null)\r\n    useEffect(()=> {\r\n      currentImage.current = null;\r\n    })\r\n\r\n    const notifyContactExist = (name,last=\"\") => {\r\n      toast.error(`${name} ${last} is alredy exist`, {\r\n          position: toast.POSITION.TOP_CENTER,\r\n          autoClose: 2000\r\n      })\r\n    }\r\n\r\n    const notifyContactAdded = (name,last=\"\") => {\r\n      toast.success(`${name} ${last} is addes successfuly!`, {\r\n          position: toast.POSITION.TOP_CENTER,\r\n          autoClose: 2000\r\n      })\r\n    }\r\n\r\n    const uploadImageHandler = (e) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          currentImage.current = reader.result;\r\n        }\r\n        if (reader.readyState === 1) {\r\n          return;\r\n        }\r\n      }\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n\r\n    return (\r\n     <React.Fragment>\r\n      <div className=\"form-container\">\r\n          <form\r\n            onSubmit={handleSubmit((new_person) => {   \r\n              new_person[\"id\"] = Math.random(); // gan new id\r\n              new_person[\"image\"] = currentImage.current ? currentImage.current : \"https://image.shutterstock.com/image-vector/people-person-icon-modern-flat-260nw-1691909635.jpg\"\r\n              let listArray = JSON.parse(localStorage.getItem('persons_list'));          \r\n              const found = listArray.some(el => el.phone === new_person.phone); // check by phone if person alrady exsist in array      \r\n              if (!found) {\r\n                listArray.push(new_person);\r\n                localStorage.setItem('persons_list', JSON.stringify(listArray));\r\n                notifyContactAdded(new_person.firstName,new_person.lastName);\r\n                reset();\r\n                setFocus(\"firstName\");\r\n                props.setNewContactAddedToggle(!props.newContactAddedToggle);\r\n                props.setShowForm(false)\r\n              }\r\n              if (found) {\r\n                notifyContactExist(new_person.firstName,new_person.lastName);\r\n              }\r\n           })}\r\n          >\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            {...register(\"firstName\", { required: \"This is required\" })}\r\n            id=\"firstName\"\r\n          />\r\n          {errors.firstName && <p>{errors.firstName.message}</p>}\r\n\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            {...register(\"lastName\", {\r\n              minLength: { value: 2, message: \"Last name should be long then 2 charectrs\" }\r\n            })}\r\n            id=\"lastName\"\r\n          />\r\n          {errors.lastName && <p>{errors.lastName.message}</p>}\r\n\r\n          <label htmlFor=\"phone\">Phone:</label>\r\n          <input\r\n            {...register(\"phone\", {\r\n              required: \"This is required\",\r\n              pattern: { value: /^\\d*\\.?\\d*$/ , message: \"Numbers Only\"},\r\n              minLength: { value: 10, message: \"Phone should containe 10 digits\" },\r\n              maxLength: { value: 10, message: \"Phone should containe 10 digits\" }\r\n            })}\r\n            id=\"phone\"\r\n          />\r\n          {errors.phone && <p>{errors.phone.message}</p>}\r\n          <label htmlFor=\"image\">Upload image:</label>\r\n          <input \r\n           {...register('image')}\r\n           id=\"image\" \r\n           name=\"image\" \r\n           type=\"file\"\r\n           onChange={uploadImageHandler} />\r\n          <input type=\"submit\" value=\"Add Person\" />\r\n        </form>\r\n      </div> \r\n    </React.Fragment> \r\n    );\r\n}\r\n\r\nexport default AddPersonForm;","import React, {useState, useEffect} from 'react';\r\n// import Modal from 'react-modal';\r\nimport './Person.css';\r\n\r\nfunction Person(props) {\r\n    // const [showImgsModal, setShowImgsModal] = useState(false);\r\n    // const [profileImg, setProfileImg] = useState(null);\r\n  \r\n    // useEffect(()=> {\r\n    //   console.log(props.id);\r\n    //   if (profileImg) {\r\n    //     let listArray = JSON.parse(localStorage.getItem('persons_list')); \r\n    //     let pos = listArray.map((e) =>  e.id ).indexOf(props.id); // position of the user i want to add in the array\r\n    //     listArray[pos].image = profileImg;\r\n    //     localStorage.setItem('persons_list', JSON.stringify(listArray));\r\n    //     window.location.reload();\r\n    //   }\r\n    // },[profileImg])\r\n\r\n    // const modalStyles = {\r\n    //   content: {\r\n    //     position: 'absolute',\r\n    //     top: '20vh',\r\n    //     left: '5vw',\r\n    //     float: 'center',\r\n    //     padding: 0,\r\n    //     marging: '0',\r\n    //     width: '90vw',\r\n    //     height:'50vh'\r\n    //   },\r\n    // };\r\n\r\n    // const openImgsModalHandler = () => {\r\n    //   setShowImgsModal(true);\r\n    // }\r\n  \r\n    // const closeImgsModalHandler = () => {\r\n    //     setShowImgsModal(false);\r\n    // }\r\n\r\n    // const uploadImageHandler = (e) => {\r\n    //   const reader = new FileReader();\r\n    //   reader.onload = () => {\r\n    //     if (reader.readyState === 2) {\r\n    //       setProfileImg(reader.result)\r\n    //     }\r\n    //     if (reader.readyState === 1) {\r\n    //       return;\r\n    //     }\r\n    //   }\r\n    //   reader.readAsDataURL(e.target.files[0]);\r\n    //   setShowImgsModal(false);\r\n    // }\r\n\r\n    return (\r\n      <>\r\n        {/* <Modal ariaHideApp={false} isOpen={showImgsModal} style={modalStyles} onRequestClose={closeImgsModalHandler}>\r\n           <input type=\"file\" name=\"image-upload\" id=\"input\" accept=\"image/*\" onChange={uploadImageHandler} />\r\n        </Modal> */}\r\n\r\n        <li className=\"person-li\" key={props.id}>\r\n          <div className=\"card\">   \r\n            <div> \r\n                <img src={props.image}\r\n                     alt=\"icon\"\r\n                     width=\"50px\"\r\n                     height=\"50px\"\r\n                     className='profile-image'\r\n                    //  onClick={openImgsModalHandler}\r\n                />\r\n            </div>  \r\n            <div>\r\n              <h3>{props.firstName} {props.lastName}</h3>\r\n            </div>  \r\n            <div>\r\n              <a href={`tel:${props.phone}`}>{props.phone}</a>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Person;","import React from 'react';\r\nimport Person from './Person';\r\nimport './PersonList.css';\r\n\r\nfunction PersonsList(props) {\r\n   let persons_list_element = <h2 className='not-found-msg'>No Contacts To Display</h2>\r\n   let listArray = localStorage.getItem(\"persons_list\") ?  JSON.parse(localStorage.getItem(\"persons_list\")) : [];\r\n\r\n   if (listArray.length > 0) {\r\n    persons_list_element = <ul className=\"person-list-container\">\r\n                                {listArray && listArray.map((person) => (\r\n                                <Person\r\n                                    key={person.id}\r\n                                    id={person.id}\r\n                                    firstName={person.firstName}\r\n                                    lastName={person.lastName}\r\n                                    phone={person.phone}\r\n                                    image={person.image}\r\n                                />\r\n                                ))}\r\n                            </ul>\r\n    }\r\n\r\n    console.log('<PersonsList /> component rendered');\r\n    return persons_list_element;\r\n}\r\n\r\nexport default PersonsList;","import React, { useEffect, useState } from 'react';\nimport AddPersonForm from './components/AddPersonForm';\nimport PersonsList from './components/PersonsList';\nimport { toast } from 'react-toastify';\n\nimport './App.css';\n\ntoast.configure();\n\nfunction App() {\n  const [showForm, setShowForm] = useState(false);\n  const [newContactAddedToggle, setNewContactAddedToggle] = useState(false);\n\n  useEffect(()=>{\n    if (localStorage.getItem(\"persons_list\") === null) {\n      localStorage.setItem('persons_list', JSON.stringify([]));\n    }\n  },[])\n\n  const toggleFormHandler = () => {\n    setShowForm(!showForm);\n  }\n\n  const headerBtn = !showForm ? <h1 onClick={toggleFormHandler}>Add New Contact</h1> : <h1 onClick={toggleFormHandler}>Done thanks</h1>\n  return (\n    <div className=\"App\">\n       { headerBtn }\n       { showForm && <AddPersonForm \n                        setNewContactAddedToggle={setNewContactAddedToggle} \n                        newContactAddedToggle={newContactAddedToggle}\n                        setShowForm={setShowForm}  /> }\n       <PersonsList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}